from helpScannerS import functions as TRSM
from helpScannerS import twoDPlotter as twoDPlot

import os

import numpy as np
import pandas
import scipy.interpolate
from scipy.interpolate import CubicSpline

import mplhep as hep
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.patheffects as mpe

if __name__ == '__main__': 

    ## paths

    # path to repo
    # E:
    pathRepo = '/afs/cern.ch/user/i/ihaque/scannerS/ScannerS-master/build/sh-bbyy-pheno'

    # path to plotting directory
    # E:
    pathPlots = '/eos/user/i/ihaque/BenchmarkplanePlots' 

    # create directories inside plotting directory for saving figures
    os.makedirs(pathPlots, exist_ok=True)
    os.makedirs(os.path.join(pathPlots), exist_ok=True)
    os.makedirs(os.path.join(pathPlots, 'BP2'), exist_ok=True)
    os.makedirs(os.path.join(pathPlots, 'BP3'), exist_ok=True)


    # path to 13 TeV TRSM ScannerS cross sections with BP2 settings
    path13_BP = os.path.join(pathRepo, 'Benchmarkplanes', 'BPs_noconstraints')

    path13_BP2 = os.path.join(path13_BP, 'BP2', 'output_BP2_noconstraints.tsv')

    # path to 13 TeV TRSM ScannerS cross sections with BP3 settings
    path13_BP3 = os.path.join(path13_BP, 'BP3', 'output_BP3_noconstraints.tsv')

    # plotting style
    plt.style.use(hep.style.ATLAS)
    hep.style.use({"mathtext.default": "rm"})
    mpl.rcParams['axes.labelsize'] = 19
    mpl.rcParams['axes.titlesize'] = 19

    ## BP2

    # calculate the cross sections of gg -> H3 -> H1(bb)H2(gamgam) at 13 TeV with BP2 settings.
    # This is done by using the NWA where the branching ratio H3 -> H1 H2, H1(bb)H2(gamgam) is 
    # generated by the ScannerS TRSM executable (path13_BP2, path13_BP3) and the gg -> H3
    # cross section is generated elsewhere at 13 TeV (see twoD_ScannerSCrossSections.py)
    ScannerS_BP2 = TRSM.observables(path13_BP2, 
                                    'bb', 'gamgam', 'mH1', 'mH2', 'mH3', 
                                    kineticExclude=True)

    # BP2 13 TeV gg -> H3 -> H1(bb) H2(gamgam)

    x, y, z, xi, yi = twoDPlot.plotAuxVar2D(ScannerS_BP2['mH1'],
                                            ScannerS_BP2['mH3'],
                                            ScannerS_BP2['x_H3_H1_bb_H2_gamgam'])
    zi = scipy.interpolate.griddata((x, y), z, (xi, yi), method='linear')

    fig, ax = plt.subplots()
    im = ax.imshow(zi, origin='lower',
                   extent=[x.min(), x.max(), y.min(), y.max()], aspect='auto')
    cont = ax.contour(xi, yi, zi, origin='lower', linewidths=0.75, colors='k')
    manualLabelPositions = [(7, 150), (20, 165), (27.5, 175), (35, 190), (50, 210),
                            (75, 250), (110, 290), (50, 370)]
    ax.clabel(cont, inline=True, fontsize=8,
              manual=manualLabelPositions)
    # cbar = fig.colorbar(im, ax=ax)
    # cbar = fig.colorbar(cont, ax=ax)

    # plt.imshow(zi, origin='lower',
    #            extent=[x.min(), x.max(), y.min(), y.max()], aspect='auto')
    # contf = plt.contourf(xi, yi, zi, extent=[x.min(), x.max(), y.min(), y.max()])
    twoDPlot.plotAuxTitleAndBounds2D(r'$\left.\sigma(gg\to h_{3} \to h_{1}(b\bar{b}) h_{2}(\gamma\gamma)) \right/ \sigma(SM)$',
                                     r'$M_{1}$ [GeV]', r'$M_{3}$ [GeV]',
                                     r'$\left.\sigma(gg\to h_{3} \to h_{1}(b\bar{b}) h_{2}(\gamma\gamma)) \right/ \sigma(SM)$',
                                     xlims=(1, 124), ylims=(126, 500), fig=fig, ax=ax, im=im)

    ### maybe remove this??
#     constraints = {'BFB': r'/////', 'Higgs': r'\\\\\ ', 'STU': r'...', 'Uni': '***'}
#     for key in constraints:

#         ScannerS_BP2_onlyConstraint = TRSM.observables(os.path.join(path13_BP, 'BP2', f'output_BP2_only{key}.tsv'),
#                                                 'bb', 'gamgam', 'mH1', 'mH2', 'mH3',  
#                                                 kineticExclude=True)

#         if len(ScannerS_BP2_onlyConstraint) == 0:
#             print(f'observables are empty for {key}')
#             continue

#         emptyKineticExclude = 0
#         nonemptyKineticExclude = 0
#         for dictKey in ScannerS_BP2_onlyConstraint:
#             if len(ScannerS_BP2_onlyConstraint[dictKey]) == 0:
#                 emptyKineticExclude = emptyKineticExclude + 1
#             else:
#                 nonemptyKineticExclude = nonemptyKineticExclude + 1

#         if emptyKineticExclude/len(ScannerS_BP2_onlyConstraint) == 1:
#             print(f'kineticExclude has excluded all observables in {key}. \n\
# Nothing to plot for {key}')   
#             continue

#         elif nonemptyKineticExclude/len(ScannerS_BP2_onlyConstraint) == 1:
#             pass

#         else:
#             raise Exception('something went wrong in plotting the constraints...')

#         # plot the constraints
#         x, y, z, xi, yi = twoDPlot.plotAuxVar2D(ScannerS_BP2_onlyConstraint['mH1'],
#                                                 ScannerS_BP2_onlyConstraint['mH3'],
#                                                 [0 for i in range(len(ScannerS_BP2_onlyConstraint['x_H3_H1_bb_H2_gamgam']))])
#         zi = scipy.interpolate.griddata((x, y), z, (xi, yi), method='linear')
#         ax.contourf(xi, yi, zi, hatches=[constraints[key]],
                    # colors='none')

    constraints = {'BFB': r'/////', 'Higgs': r'\\\\\ ', 'STU': r'...', 'Uni': '***'}
    for key in constraints:
        twoDPlot.plotAuxConstraints(os.path.join(path13_BP, 'BP2', f'output_BP2_only{key}.tsv'),
                                    'mH1', 'mH3', 'x_H3_H1_bb_H2_gamgam',
                                    ax, [constraints[key]])
    ### maybe remove this???

    plt.tight_layout()
    plt.savefig(os.path.join(pathPlots, 'BP2', 'BP2_XS_XSH_bbgamgam_1.pdf'))
    plt.close()

    del x, y, z, xi, yi


    # BP2 13 TeV gg -> H3 -> H1(gamgam) H2(bb)

    x, y, z, xi, yi = twoDPlot.plotAuxVar2D(ScannerS_BP2['mH1'],
                                            ScannerS_BP2['mH3'],
                                            ScannerS_BP2['x_H3_H1_gamgam_H2_bb'])
    zi = scipy.interpolate.griddata((x, y), z, (xi, yi), method='linear')

    # plt.imshow(zi, origin='lower',
    #            extent=[x.min(), x.max(), y.min(), y.max()], aspect='auto')
    # # contf = plt.contourf(xi, yi, zi, extent=[x.min(), x.max(), y.min(), y.max()])
    # twoDPlot.plotAuxTitleAndBounds2D(r'$\left.\sigma(gg\to h_{3} \to h_{1}(\gamma\gaa) h_{2}(b\bar{b}))$ a\rightt 13 TeV',
    #                                  r'$M_{1}$ [GeV]', r'$M_{3}$ [GeV]',
    #                                  r'$\left.\sigma(gg\to h_{3} \to h_{1}(\gamma\gaa) h_{2}(b\bar{b}))$',\right
    #                                  xlims=(1, 124), ylims=(126, 500))
    fig, ax = plt.subplots()
    im = ax.imshow(zi, origin='lower',
                   extent=[x.min(), x.max(), y.min(), y.max()], aspect='auto')
    cont = ax.contour(xi, yi, zi, origin='lower', linewidths=0.75, colors='k')
    manualLabelsPositions = [(50, 280), (67.5, 270), (80, 265),
                             (90, 265), (100, 255), (112.5, 255)]
    ax.clabel(cont, inline=True, fontsize=10,
              manual=manualLabelsPositions)

    twoDPlot.plotAuxTitleAndBounds2D(r'$\left.\sigma(gg\to h_{3} \to h_{1}(\gamma\gamma) h_{2}(b\bar{b})) \right/ \sigma(SM)$',
                                     r'$M_{1}$ [GeV]', r'$M_{3}$ [GeV]',
                                     r'$\left.\sigma(gg\to h_{3} \to h_{1}(\gamma\gamma) h_{2}(b\bar{b})) \right/ \sigma(SM)$',
                                     xlims=(1, 124), ylims=(126, 500), fig=fig, ax=ax, im=im)

    plt.tight_layout()
    plt.savefig(os.path.join(pathPlots, 'BP2', 'BP2_XS_XSH_bbgamgam_2.pdf'))
    plt.close()

    del x, y, z, xi, yi


    ## BP3

    ScannerS_BP3 = TRSM.observables(path13_BP3,
                                         'bb', 'gamgam', 'mH1', 'mH2', 'mH3',
                                         kineticExclude=True)
                                         # normSM=1

    # BP3 13 TeV gg -> H3 -> H1(bb) H2(gamgam)

    x, y, z, xi, yi = twoDPlot.plotAuxVar2D(ScannerS_BP3['mH2'],
                                            ScannerS_BP3['mH3'],
                                            ScannerS_BP3['x_H3_H1_bb_H2_gamgam'])
    zi = scipy.interpolate.griddata((x, y), z, (xi, yi), method='linear')


    # plt.imshow(zi, origin='lower',
    #            extent=[x.min(), x.max(), y.min(), y.max()], aspect='auto')
    # # contf = plt.contourf(xi, yi, zi, extent=[x.min(), x.max(), y.min(), y.max()])
    # twoDPlot.plotAuxTitleAndBounds2D(r'$\left.\sigma(gg\to h_{3} \to h_{1}(b\bar{b}) h_{2}(\gamma\gamma)) \right/ \sigma(SM)$',
    #                                  r'$M_{1}$ [GeV]', r'$M_{3}$ [GeV]',
    #                                  r'$\left.\sigma(gg\to h_{3} \to h_{1}(b\bar{b}) h_{2}(\gamma\gamma)) \right/ \sigma(SM)$',
    #                                  xlims=(126, 500), ylims=(255, 650))
    fig, ax = plt.subplots()
    im = ax.imshow(zi, origin='lower',
                   extent=[x.min(), x.max(), y.min(), y.max()], aspect='auto')
    cont = ax.contour(xi, yi, zi, origin='lower', linewidths=0.75, colors='k')
    manualLabelPositions=[(130, 375), (130, 390), (140, 425), (140, 450),
                          (140, 480), (140, 530), (185, 625)]
    ax.clabel(cont, inline=True, fontsize=10, manual=manualLabelPositions)

    twoDPlot.plotAuxTitleAndBounds2D(r'$\left.\sigma(gg\to h_{3} \to h_{1}(b\bar{b}) h_{2}(\gamma\gamma)) \right/ \sigma(SM)$',
                                     r'$M_{1}$ [GeV]', r'$M_{3}$ [GeV]',
                                     r'$\left.\sigma(gg\to h_{3} \to h_{1}(b\bar{b}) h_{2}(\gamma\gamma)) \right/ \sigma(SM)$',
                                     xlims=(126, 500), ylims=(255, 650), fig=fig, ax=ax, im=im)

    ax.tick_params(axis='y', which='major', length=3)
    ax.tick_params(axis='y', which='minor', length=2)
    plt.tight_layout()
    plt.savefig(os.path.join(pathPlots, 'BP3', 'BP3_XS_XSH_bbgamgam_1.pdf'))
    plt.close()

    del x, y, z, xi, yi


    ## BP3 13 TeV gg -> H3 -> H1(gamgam) H2(bb)
    
    x, y, z, xi, yi = twoDPlot.plotAuxVar2D(ScannerS_BP3['mH2'],
                                            ScannerS_BP3['mH3'],
                                            ScannerS_BP3['x_H3_H1_gamgam_H2_bb'])
    zi = scipy.interpolate.griddata((x, y), z, (xi, yi), method='linear')

    # plt.imshow(zi, origin='lower',
    #            extent=[x.min(), x.max(), y.min(), y.max()], aspect='auto')
    # # contf = plt.contourf(xi, yi, zi, extent=[x.min(), x.max(), y.min(), y.max()])
    # twoDPlot.plotAuxTitleAndBounds2D(r'$\left.\sigma(gg\to h_{3} \to h_{1}(\gamma\gaa) h_{2}(b\bar{b}))$ a\rightt 13 TeV',
    #                                  r'$M_{1}$ [GeV]', r'$M_{3}$ [GeV]',
    #                                  r'$\left.\sigma(gg\to h_{3} \to h_{1}(\gamma\gaa) h_{2}(b\bar{b}))$',\right
    #                                  xlims=(126,500), ylims=(255, 650))
    fig, ax = plt.subplots()
    im = ax.imshow(zi, origin='lower',
                   extent=[x.min(), x.max(), y.min(), y.max()], aspect='auto')
    cont = ax.contour(xi, yi, zi, origin='lower', linewidths=0.75, colors='k')
    manualLabelPositions = [(130, 315), (135, 370), (135, 415), (135, 460),
                            (135, 510), (135, 580)]
    ax.clabel(cont, inline=True, fontsize=10, manual=manualLabelPositions)

    twoDPlot.plotAuxTitleAndBounds2D(r'$\left.\sigma(gg\to h_{3} \to h_{1}(\gamma\gamma) h_{2}(b\bar{b})) \right/ \sigma(SM)$',
                                     r'$M_{1}$ [GeV]', r'$M_{3}$ [GeV]',
                                     r'$\left.\sigma(gg\to h_{3} \to h_{1}(\gamma\gamma) h_{2}(b\bar{b})) \right/ \sigma(SM)$',
                                     xlims=(126, 500), ylims=(255, 650), fig=fig, ax=ax, im=im)

    ax.tick_params(axis='y', which='major', length=3)
    ax.tick_params(axis='y', which='minor', length=2)
    plt.tight_layout()
    plt.savefig(os.path.join(pathPlots, 'BP3', 'BP3_XS_XSH_bbgamgam_2.pdf'))
    plt.close()

    del x, y, z, xi, yi

    # everything below this comment can be ignored (some sanity checks)
    print('Running some sanity checks, this can be ignored...')

    ScannerS_BP2 = TRSM.observables(path13_BP2,
                                         'bb', 'gamgam', 'mH1', 'mH2', 'mH3',
                                         normSM=1,
                                         kineticExclude=False)

    ScannerS_BP3 = TRSM.observables(path13_BP3,
                                         'bb', 'gamgam', 'mH1', 'mH2', 'mH3',
                                         normSM=1,
                                         kineticExclude=False)


    ScannerS_BP2_H1H2, ScannerS_BP2_H1H1, ScannerS_BP2_H2H2 = TRSM.ppXNPSM_massfree(path13_BP2,
                                                                                       'mH1', 'mH2', 'mH3', 'bb', 'gamgam',
                                                                                       normalizationSM=1, run3=True)

    ScannerS_BP3_H1H2, ScannerS_BP3_H1H1, ScannerS_BP3_H2H2 = TRSM.ppXNPSM_massfree(path13_BP3,
                                                                                       'mH1', 'mH2', 'mH3', 'bb', 'gamgam',
                                                                                       normalizationSM=1, run3=True)

    TRSM.comparer(ScannerS_BP2, ScannerS_BP2_H1H2)
    TRSM.comparer(ScannerS_BP3, ScannerS_BP3_H1H2)
