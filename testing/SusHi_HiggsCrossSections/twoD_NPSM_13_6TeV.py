from helpScannerS import functions as TRSM
from helpScannerS import twoDPlotter as twoDPlot

import os

import numpy as np
import pandas
import scipy.interpolate
from scipy.interpolate import CubicSpline

import mplhep as hep
import matplotlib as mpl
import matplotlib.pyplot as plt

if __name__ == '__main__': 

    ## paths

    # path to repo
    # E:
    pathRepo = '/afs/cern.ch/user/i/ihaque/scannerS/ScannerS-master/build/sh-bbyy-pheno'

    # path to plotting directory
    # E:
    pathPlots ='/eos/user/i/ihaque/SusHiPlots' 

    # create directories inside plotting directory for saving figures
    os.makedirs(pathPlots, exist_ok=True)
    os.makedirs(os.path.join(pathPlots, '13_6TeV'), exist_ok=True)
    os.makedirs(os.path.join(pathPlots, '13_6TeV', 'BP2'), exist_ok=True)
    os.makedirs(os.path.join(pathPlots, '13_6TeV', 'BP3'), exist_ok=True)
    
    # path to 13.6 TeV gg > h_{SM} ScannerS cross sections
    path13_6 = os.path.join(pathRepo, 'testing', 'SusHi_HiggsCrossSections',
                          '13_6TeV_ScannerSCrossSections.tsv')

    # path to 14 TeV gg > h_{SM} YR4 cross sections
    path14 = os.path.join(pathRepo, 'testing', 'SusHi_HiggsCrossSections',
                          '14TeV_YR4CrossSections.tsv')

    # path to 13 TeV TRSM ScannerS cross sections with BP2 settings
    path13_BP2 = os.path.join(pathRepo, 'plots2D', 'BP2_BR_XSH', 'output_BP2_BR_XSH.tsv')
    
    # path to 13 TeV TRSM ScannerS cross sections with BP3 settings
    path13_BP3 = os.path.join(pathRepo, 'plots2D', 'BP3_BR_XSH', 'output_BP3_BR_XSH.tsv')

    # plotting style
    plt.style.use(hep.style.ATLAS)
    hep.style.use({"mathtext.default": "rm"})
    mpl.rcParams['axes.labelsize'] = 19
    mpl.rcParams['axes.titlesize'] = 19

    # calculate the cross sections of gg -> H3 -> H1(bb)H2(gamgam) at 13.6 TeV with BP2 settings.
    # This is done by using the NWA where the branching ratio H3 -> H1 H2, H1(bb)H2(gamgam) is 
    # generated by the ScannerS TRSM executable (path13_BP2, path13_BP3) and the gg -> H3
    # cross section is generated elsewhere at 13.6 TeV (see twoD_ScannerSCrossSections.py)
    ScannerS_H1H2_13_6, ScannerS_H1H1_13_6, ScannerS_H2H2_13_6 = TRSM.ppXNPSM_massfree(path13_BP2,
                                                                                       'mH1', 'mH2', 'mH3', 'bb', 'gamgam',
                                                                                       normalizationSM=1, run3=True)
                                                                                       # pathRun3Data=path13_6,
                                                                                       # keyMassRun3='mass',
                                                                                       # keyCrossSecRun3='SMCrossSec')

    (ScannerS_13_6_mH1,
     ScannerS_13_6_mH2,
     ScannerS_13_6_mH3,
     ScannerS_13_6_x_H3_H1_bb_H2_gamgam)  = twoDPlot.kineticExcluder(ScannerS_H1H2_13_6[0],
                                                                     ScannerS_H1H2_13_6[1],
                                                                     ScannerS_H1H2_13_6[2],
                                                                     ScannerS_H1H2_13_6[4]) 
    # ScannerS_13_6_mH1 = ScannerS_H1H2_13_6[0]
    # ScannerS_13_6_mH3 = ScannerS_H1H2_13_6[2]
    # ScannerS_13_6_x_H3_H1_bb_H2_gamgam = ScannerS_H1H2_13_6[4]

    ScannerS_13_6 = TRSM.observables(path13_BP2, 'bb', 'gamgam', 'mH1', 'mH2', 'mH3', normSM=1)

    TRSM.comparer(ScannerS_13_6, ScannerS_H1H2_13_6)
    
    if (np.array_equal(np.array(ScannerS_13_6['mH1']), ScannerS_H1H2_13_6[0]) and 
    np.array_equal(np.array(ScannerS_13_6['mH2']), ScannerS_H1H2_13_6[1]) and
    np.array_equal(np.array(ScannerS_13_6['mH3']), ScannerS_H1H2_13_6[2]) and
    np.array_equal(np.array(ScannerS_13_6['x_H3_H1_bb_H2_gamgam']), ScannerS_H1H2_13_6[4]) and
    np.array_equal(np.array(ScannerS_13_6['x_H3_H1_gamgam_H2_bb']), ScannerS_H1H2_13_6[5]) and
    np.array_equal(np.array(ScannerS_13_6['x_H3_H1H2_bbgamgam']), ScannerS_H1H2_13_6[3])):
        print('Success!')

    else:
        print(np.allclose(np.array(ScannerS_13_6['mH1']), ScannerS_H1H2_13_6[0], rtol=0, atol=1e-17))
        print(np.allclose(np.array(ScannerS_13_6['mH2']), ScannerS_H1H2_13_6[1], rtol=0, atol=1e-17))
        print(np.allclose(np.array(ScannerS_13_6['mH3']), ScannerS_H1H2_13_6[2], rtol=0, atol=1e-17))
        print(np.allclose(np.array(ScannerS_13_6['x_H3_H1H2_bbgamgam']), ScannerS_H1H2_13_6[3], rtol=0, atol=1e-17))
        print(np.allclose(np.array(ScannerS_13_6['x_H3_H1_bb_H2_gamgam']), ScannerS_H1H2_13_6[4], rtol=0, atol=1e-17))
        print(np.allclose(np.array(ScannerS_13_6['x_H3_H1_gamgam_H2_bb']), ScannerS_H1H2_13_6[5], rtol=0, atol=1e-17))
        
        print(np.array(ScannerS_13_6['x_H3_H1_bb_H2_gamgam'])[2000:3010])
        print(ScannerS_H1H2_13_6[4][2000:3010])
        
        print(np.array(ScannerS_13_6['x_H3_H1_gamgam_H2_bb'])[2000:3010])
        print(ScannerS_H1H2_13_6[5][2000:3010])
        
        print(np.array(ScannerS_13_6['x_H3_H1H2_bbgamgam'])[2000:3010])
        print(ScannerS_H1H2_13_6[3][2000:3010])
        raise Exception('ppXNPSM and observables do not work the same....')
    

    x, y, z, xi, yi = twoDPlot.plotAuxVar2D(ScannerS_13_6_mH1, ScannerS_13_6_mH3, ScannerS_13_6_x_H3_H1_bb_H2_gamgam)
    zi = scipy.interpolate.griddata((x, y), z, (xi, yi), method='linear')

    contf = plt.contourf(xi, yi, zi, extent=[x.min(), x.max(), y.min(), y.max()])
    twoDPlot.plotAuxTitleAndBounds2D(r'$\sigma(gg\to h_{3} \to h_{1}(b\bar{b}) h_{2}(\gamma\gamma))$ at 13.6 TeV',
                                     r'$M_{1}$', r'$M_{3}$',
                                     r'$\sigma(gg\to h_{3} \to h_{1}(b\bar{b}) h_{2}(\gamma\gamma))$')
    plt.savefig(os.path.join(pathPlots, '13_6TeV', 'BP2', '13_6_BP2_XS_XSH_bb_gamgam.pdf'))

    # calculate the cross sections of gg -> X -> S(bb)H(gamgam) at 14 TeV.
    # calculation is similar to above, except use the 14 TeV YR4 cross sections
    # SusHi_H1H2_14, SusHi_H1H1_14, SusHi_H2H2_14 = TRSM.ppXNPSM_massfree(pathBP2,
    #                                                                     'mH1', 'mH2', 'mH3', 'bb', 'gamgam', 
    #                                                                     normalizationSM=1, run3=True,
    #                                                                     pathRun3Data=path14)
    


